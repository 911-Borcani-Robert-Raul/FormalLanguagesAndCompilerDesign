%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int processed_lines = 0;
%}

%option noyywrap
%option caseless

IDENTIFIER {LETTER}({LETTER}|{DIGIT})*
BAD_IDENTIFIER ({DIGIT})+({LETTER})+({LETTER}|{DIGIT})*
DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z_]
STRING_CONSTANT \"({LETTER}|{DIGIT})*\"

%%

"sqrt" { return SQRT; }
"char" { return CHAR; }
"integer" { return INTEGER; }
"if" { return IF; }
"then" { return THEN; }
"el" { return EL; }
"while" { return WHILE; }
"repeat" { return REPEAT; }
"var" { return VAR; }
"end" { return END; }
"mod" { return MOD; }
"space" { return SPACE; }
"read" { return READ; }
"write" { return WRITE; }
"struct" { return STRUCT; }
"array" { return ARRAY; }
"of" { return OF; }

{IDENTIFIER} {return IDENTIFIER; }

{BAD_IDENTIFIER} {return -1;}

{INT_CONSTANT} {return INTCONSTANT; }

{STRING_CONSTANT} {return STRINGCONSTANT; }

"+" { return PLUS; }
"-" { return MINUS; }
"*" { return TIMES; }
"/" { return DIV; }
"%" { return MOD; }
"=" { return EQ; }
">" { return BIGGER; }
">=" { return BIGGEREQ; }
"<" { return LESS; }
"<=" { return LESSEQ; }
"==" { return EQQ; }
"!=" { return NEQ; }
"&&" { return AND; }
"||" { return OR; }

";" { return SEMICOLON; }
":" { return COLON; }
"(" { return OPEN; }
")" { return CLOSE; }
"[" { return OPENA; }
"]" { return CLOSEA; }
"{" { return BRACKETOPEN; }
"}" { return BRACKETCLOSE; }
"," { return COMMA; }
"#" { return HASHTAG; }
"." { return DOT; }

[ \t]+ {}

[\n]+ {++processed_lines;}

. {printf("Error: token %s at line %d\n", yytext, processed_lines); return -1;}

%%