Sintactical rules:

program ::= "var" decllist ";" cmpdstmt "end"

decllist ::= declaration | declaration ";" decllist

declaration ::= IDENTIFIER ":" type | "struct " IDENTIFIER "(" decllist ")"

type1 ::= "char" | "integer" | arraydecl

arraydecl ::= "array" "[" nr "]" "of" type1

type  ::= type1 | arraydecl

cmpdstmt ::= "$" stmtlist "$"

stmtlist ::= stmt | stmt ";" stmtlist

stmt ::= simplstmt | structstmt

simplstmt ::= assignstmt | iostmt | structaccessstmt

assignstmt ::= IDENTIFIER "=" expression

expression ::= expression "+" term | term | expression "-" term

term ::= term "*" factor | factor | term "%" factor | term "/" factor

factor ::= "(" expression ")" | IDENTIFIER | noconst | "sqrt(" expression ")"

iostmt ::= "read" "(" IDENTIFIER ")" | "write" "(" IDENTIFIER ")" | "write" "(" string ")"

structaccessstmt ::= IDENTIFIER "." IDENTIFIER

IDENTIFIER ::= string | string "[" integer "]"

structstmt ::= cmpdstmt | ifstmt | whilestmt

ifstmt ::= "if" condition "then" stmt ["el" stmt]

whilestmt ::= "while" condition "repeat" stmt

condition ::= expression RELATION expression

RELATION ::= "<" | "<=" | "==" | "<>" | ">=" | ">"